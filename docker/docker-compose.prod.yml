version: "3.9"
services:
  postgres:
    image: postgres:17
    container_name: pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_SUPER_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_ADMIN_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_APP_PASSWORD: ${POSTGRES_APP_PASSWORD}
      PGBOUNCER_AUTH_PASSWORD: ${PGBOUNCER_AUTH_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  pgbouncer:
    image: edoburu/pgbouncer:1.24.1
    container_name: pgbouncer
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "6432:6432"
    environment:
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_SUPER_PASSWORD}
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    healthcheck:
      test: ["CMD-SHELL", "printf '' >/dev/tcp/127.0.0.1/6432 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  app:
    build:
      context: ../.
      dockerfile: Dockerfile
    container_name: app
    depends_on:
      pgbouncer:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_URL: postgres://app_user:${POSTGRES_APP_PASSWORD}@pgbouncer:6432/app_global
      POSTGRES_ADMIN_URL: postgres://admin_user:${POSTGRES_ADMIN_PASSWORD}@postgres:5432/app_global
      PGBOUNCER_URL: postgres://app_user:${POSTGRES_APP_PASSWORD}@pgbouncer:6432/app_global
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      NODE_ENV: production
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  pg_data:
