import type { Metadata } from "next";
import { headers } from "next/headers";
import { ActiveOrgProvider } from "@/components/app/active-org-provider";
import { AppHeader } from "@/components/app/header";
import { AppSidebar } from "@/components/app/sidebar/sidebar";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { auth } from "@/lib/auth";
import { requireSession } from "@/lib/session";

export const runtime = "nodejs";

export const metadata: Metadata = {
  title: "Unlock Auto",
  description: "Generated by create next app",
};

export default async function AppLayout({
  sidebar,
  header,
  children,
}: Readonly<{
  header: React.ReactNode;
  sidebar: React.ReactNode;
  children: React.ReactNode;
}>) {
  const { session, user } = await requireSession();
  let activeOrg: any = null;
  let organizations: any[] = [];
  try {
    const orgsResponse: any = await auth.api.listOrganizations({
      headers: await headers(),
    });
    organizations = Array.isArray(orgsResponse)
      ? orgsResponse
      : (orgsResponse?.data ?? []);
    if (session.activeOrganizationId) {
      activeOrg =
        organizations.find((o: any) => o.id === session.activeOrganizationId) ??
        null;
    }
  } catch (_error) {
    // ignore, render without organizations
  }

  return (
    <SidebarProvider>
      <ActiveOrgProvider value={Boolean(session.activeOrganizationId)}>
        <AppSidebar
          organization={activeOrg || null}
          organizations={organizations}
          sidebar={sidebar}
          user={user}
        />
        <SidebarInset>
          <AppHeader />
          {children}
        </SidebarInset>
      </ActiveOrgProvider>
    </SidebarProvider>
  );
}
