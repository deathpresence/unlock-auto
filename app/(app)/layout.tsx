import type { Metadata } from "next";
import { headers } from "next/headers";
import type { ReactNode } from "react";
import {
  clearActiveBranch,
  getActiveBranch,
} from "@/app/(app)/(dashboard)/dashboard/branches/branch-actions";
import { ActiveOrgProvider } from "@/components/app/active-org-provider";
import { AppHeader } from "@/components/app/header";
import { AppSidebar } from "@/components/app/sidebar/sidebar";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import type { Organization } from "@/db/global/schema";
import { listBranches } from "@/db/tenant/queries";
import type { Branch } from "@/db/tenant/schema";
import { auth } from "@/lib/auth";
import { requireSession } from "@/lib/session";

export const runtime = "nodejs";

export const metadata: Metadata = {
  title: "Unlock Auto",
  description: "Generated by create next app",
};

async function getBranchesForOrg() {
  try {
    const fetchedBranches = await listBranches();
    const activeBranchId = await getActiveBranch();

    if (!activeBranchId) {
      return {
        branches: fetchedBranches,
        defaultBranch: fetchedBranches[0] ?? null,
      };
    }

    const branchExists = fetchedBranches.some((b) => b.id === activeBranchId);
    if (branchExists) {
      const defaultBranch =
        fetchedBranches.find((b) => b.id === activeBranchId) ?? null;
      return { branches: fetchedBranches, defaultBranch };
    }

    await clearActiveBranch();
    return {
      branches: fetchedBranches,
      defaultBranch: fetchedBranches[0] ?? null,
    };
  } catch {
    return { branches: [], defaultBranch: null };
  }
}

export default async function AppLayout({
  sidebar,
  children,
}: Readonly<{
  sidebar: ReactNode;
  children: ReactNode;
}>) {
  const { session, user } = await requireSession();
  let activeOrg: Organization | null = null;
  let branches: Branch[] = [];
  let defaultBranch: Branch | null = null;

  try {
    const orgsResponse = (await auth.api.listOrganizations({
      headers: await headers(),
    })) as Organization[] | { data: Organization[] };
    const organizations: Organization[] = Array.isArray(orgsResponse)
      ? orgsResponse
      : orgsResponse.data;
    if (session.activeOrganizationId) {
      activeOrg =
        organizations.find((o) => o.id === session.activeOrganizationId) ??
        null;
    }
  } catch (_error) {
    // ignore, render without organizations
  }

  if (activeOrg) {
    const result = await getBranchesForOrg();
    branches = result.branches;
    defaultBranch = result.defaultBranch;
  }

  return (
    <SidebarProvider>
      <ActiveOrgProvider value={Boolean(session.activeOrganizationId)}>
        <AppSidebar
          branches={branches}
          defaultBranch={defaultBranch}
          organization={activeOrg || null}
          sidebar={sidebar}
          user={user}
        />
        <SidebarInset>
          <AppHeader />
          {children}
        </SidebarInset>
      </ActiveOrgProvider>
    </SidebarProvider>
  );
}
